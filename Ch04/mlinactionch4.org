* naive bayes
** conditional probability
P(A|B) = P(A&B)/P(B)
| bucket A | bucket B |
|----------+----------|
| G G B B  | G B B    |
|----------+----------|


P(G|bucketB) = P( gray & bucketB) / P(bucketB) = 1/7/(3/7) = 1/3

- p1(c_1 |x,y) > p2(c_2 |x,y)  -> class 1
- p1(c_1 |x,y) < p2(c_2 |x,y)  -> class 2
** classifying text
*** making word vectors from text
set : buil-in data structure for set
#+BEGIN_SRC python
def createVocabList(dataSet):
    vocabSet = set([])  #create empty set
    for document in dataSet:
        vocabSet = vocabSet | set(document) #union of the two sets
    return list(vocabSet)

def setOfWords2Vec(vocabList, inputSet):
    returnVec = [0]*len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVec[vocabList.index(word)] = 1
        else: print "the word: %s is not in my Vocabulary!" % word
    return returnVec
#+END_SRC
bayes.setOfWords2Vec(my, p[0])
[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1]
*** training
p(c_i | w) = p(w|c_i )* p(c_i)/p(w)
use log(x) to avoid 0 multiplier, underflow
#+BEGIN_SRC python
def trainNB0(trainMatrix,trainCategory):
    numTrainDocs = len(trainMatrix)
    numWords = len(trainMatrix[0])
    pAbusive = sum(trainCategory)/float(numTrainDocs)
    p0Num = ones(numWords); p1Num = ones(numWords)      #change to ones() 
    p0Denom = 2.0; p1Denom = 2.0                        #change to 2.0
    for i in range(numTrainDocs):
        if trainCategory[i] == 1:
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])
        else:
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])
    p1Vect = log(p1Num/p1Denom)          #change to log()
    p0Vect = log(p0Num/p0Denom)          #change to log()
    return p0Vect,p1Vect,pAbusive
#+END_SRC

*** test
#+BEGIN_SRC python
  def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
      p1 = sum(vec2Classify * p1Vec) + log(pClass1)    #element-wise mult
      p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1)
      if p1 > p0:
          return 1
      else: 
          return 0

  def testingNB():
      listOPosts,listClasses = loadDataSet()
      myVocabList = createVocabList(listOPosts)
      trainMat=[]
      for postinDoc in listOPosts:
          trainMat.append(setOfWords2Vec(myVocabList, postinDoc))
      p0V,p1V,pAb = trainNB0(array(trainMat),array(listClasses))
      testEntry = ['love', 'my', 'dalmation']
      thisDoc = array(setOfWords2Vec(myVocabList, testEntry))
      print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb)
      testEntry = ['stupid', 'garbage']
      thisDoc = array(setOfWords2Vec(myVocabList, testEntry))
      print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb)
#+END_SRC

*** bag-of-words document model

#+BEGIN_SRC python
def bagOfWords2VecMN(vocabList, inputSet):
    returnVec = [0]*len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVec[vocabList.index(word)] += 1
    return returnVec
#+END_SRC

** classifying spam emails

#+BEGIN_SRC python
def textParse(bigString):    #input is big string, #output is word list
    import re
    listOfTokens = re.split(r'\W*', bigString) # \\W means non-word char
    return [tok.lower() for tok in listOfTokens if len(tok) > 2] 
    
def spamTest():
    docList=[]; classList = []; fullText =[]
    for i in range(1,26):
        wordList = textParse(open('email/spam/%d.txt' % i).read())
        docList.append(wordList)
        fullText.extend(wordList)
        classList.append(1)
        wordList = textParse(open('email/ham/%d.txt' % i).read())
        docList.append(wordList)
        fullText.extend(wordList)
        classList.append(0)
    vocabList = createVocabList(docList)#create vocabulary
    trainingSet = range(50); testSet=[]           #create test set
    for i in range(10):
        randIndex = int(random.uniform(0,len(trainingSet)))
        testSet.append(trainingSet[randIndex])
        del(trainingSet[randIndex])  
    trainMat=[]; trainClasses = []
    for docIndex in trainingSet:#train the classifier (get probs) trainNB0
        trainMat.append(bagOfWords2VecMN(vocabList, docList[docIndex]))
        trainClasses.append(classList[docIndex])
    p0V,p1V,pSpam = trainNB0(array(trainMat),array(trainClasses))
    errorCount = 0
    for docIndex in testSet:        #classify the remaining items
        wordVector = bagOfWords2VecMN(vocabList, docList[docIndex])
        if classifyNB(array(wordVector),p0V,p1V,pSpam) != classList[docIndex]:
            errorCount += 1
            print "classification error",docList[docIndex]
    print 'the error rate is: ',float(errorCount)/len(testSet)
#+END_SRC

